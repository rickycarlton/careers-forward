// *************************************
//
//   Helpers
//   -> Functions, Mixins, Extends, Animations
//
// *************************************

// -------------------------------------
//   Functions
// -------------------------------------



// ----- navin ----- //
@include keyframes(navin) {
  0%   { opacity: 0; }
  35% { opacity: 1; }
}



// ----- Em ----- //
// -> Converts pixel value to an em
//
// $target - the target pixel size
// $context - the context font-size

@function em($target, $context: $b-fontSize) {
  @if $target == 0 {
    @return 0;
  }
  @else {
    @return $target / $context * 1em;
  }
}

// -------------------------------------
//   Mixins
// -------------------------------------

// ----- Tint Image ----- //

@mixin tint-image($color,$alpha,$name) {
  background: linear-gradient(
      rgba($color,$alpha), 
      rgba($color,$alpha)
    ), url($name) no-repeat center center;
}

// ----- Font Face ----- //
// -> https://github.com/thoughtbot/bourbon/edit/master/app/assets/stylesheets/css3/_font-face.scss#
//
// $family - the font-family
// $path - the font path
// $weight - the font-weight
// $style - the font-style
// $asset-pipeline - use the Rails asset pipeline (boolean)

@mixin font-face($family, $path, $weight: normal, $style: normal, $asset-pipeline: true) {
  @font-face {
    font-family: $family;
    font-style: $style;
    font-weight: $weight;
    @if $asset-pipeline == true {
      src: font-url("#{$path}.eot");
      src: font-url("#{$path}.eot?#iefix") format("embedded-opentype"), font-url("#{$path}.woff") format("woff"), font-url("#{$path}.ttf") format("truetype"), font-url("#{$path}.svg##{$family}") format("svg");
    }
    @else {
      src: url("#{$path}.eot");
      src: url("#{$path}.eot?#iefix") format("embedded-opentype"), url("#{$path}.woff") format("woff"), url("#{$path}.ttf") format("truetype"), url("#{$path}.svg##{$family}") format("svg");
    }
  }
}

// ----- Respond-to ----- //
// -> Generates a media query
//
// $val - the breakpoint size
// $query - the type of query ('min-width', 'max-width')
// $media - the media type ('screen', 'print', etc.)
// @content - the generated content within the mixin

@mixin respond-to($val, $query: min-width, $media: screen) {
  @media #{$media} and ($query: $val) {
    @content;
  }
}

// ----- Horizontal Align  ----- //
// -> Horizontaly aligns the element's position absolutey
//
// $width - the width of the element we are positioning

@mixin h-align($width){
  position: absolute;
  width: $width;
  left: 50%;
  margin-left: $width * -.5;
}
@mixin v-align($width){
  position: absolute;
  width: $width;
  top: 50%;
  margin-top: $width * -.5;
}

// -------------------------------------
//   Extends
// -------------------------------------

// ----- Clearfix ----- //

.group::after {
  clear: both;
  content: "";
  display: table;
}

.group:before,
.group:after {
    content: " "; /* 1 */
    display: table; /* 2 */
}

.group:after {
    clear: both;
}

// ----- Debug ----- //

.debug {
  background-color: pink !important;
}

// ----- Ellipsis ----- //

.ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// ----- Image Replacement ----- //

.ir {
  background-color: transparent;
  border: 0;
  overflow: hidden;
  &::before {
    content: "";
    display: block;
    width: 0;
    height: 150%;
  }
}

// -------------------------------------
//   Animations
// -------------------------------------

// ...
